// Defines a bunch of enums we're going to need, of object types.
// These are all done in one file to facilitate the memory manager.

#ifndef StormForge_Shared_ObjectTypes
#define StormForge_Shared_ObjectTypes


#ifndef NULL
   #define NULL 0
#endif

#define INVALID -1


// Types of math primitives.
enum MathPrimitives {

	// Primitives
	MATH_MATRIX,
	MATH_VERTEX,
	MATH_VECTOR,

	// Count
	MATH_COUNT,
};

	
// The types of shape we could have
enum BoundingShapeType { 

	// BASE UNIT (set equal to create numerical continuity)
	SHAPE_BASE = MATH_COUNT,

	// 3D SHAPES
	SHAPE_SPHERE, SHAPE_BOX, SHAPE_CYLINDER, SHAPE_VERTICAL_CYLINDER, SHAPE_FRUSTUM, 

	// 2D SHAPES
	SHAPE_TRIANGLE, SHAPE_PLANE, SHAPE_QUAD, 
	
	// 1D SHAPES
	SHAPE_LINE,

	// COUNT
	SHAPE_COUNT,
};





// Managers and core technology
enum CoreTechType
{

	CORETYPE_DIRECTINPUT = SHAPE_COUNT,
		CORETYPE_INPUTDEVICE,
			CORETYPE_INPUTDEVICE_KEYBOARD,
			CORETYPE_INPUTDEVICE_MOUSE,
			CORETYPE_INPUTDEVICE_JOYSTICK,
				CORETYPE_INPUT_FFEFFECT,
		CORETYPE_INPUT_ACTIONMAP,
			CORETYPE_INPUT_ACTION,
	
	CORETYPE_RENDERER,
		CORETYPE_RENDERER_RENDERINFO,
		CORETYPE_RENDERER_TEXTUREMANAGER,
		CORETYPE_RENDERER_LIGHT,
		CORETYPE_RENDERER_LIGHTMGR,
		CORETYPE_RENDERER_SHAPEMANAGER,
		CORETYPE_DIRECT3D_WRAPPER,
		CORETYPE_DIRECT3D_MATERIAL,
		CORETYPE_DIRECT3D_MATRIXSTACK,
		CORETYPE_DXMODEL,
		CORETYPE_RENDERER_FONT,
		
	CORETYPE_SOUNDMANAGER,
		CORETYPE_SOUNDFILE,

	CORETYPE_TIMER,
	CORETYPE_GAMECLASS,
	CORETYPE_COUNT,
};


// Possible types of items derived from the base class.
enum BaseType
{
	// BASE UNIT (set equal to create numerical continuity)
	BASETYPE_BASE = CORETYPE_COUNT,

	// CHARACTERS
	BASETYPE_CHARACTER,
	
		BASETYPE_HUMANOID,
			BASETYPE_RANGER,
			BASETYPE_ORCSCOUT,
			BASETYPE_ORCCUTTER,
			BASETYPE_ORCLT,
			BASETYPE_ORCBOSS,
	
		BASETYPE_BIRD,
			BASETYPE_FALCON, 
			BASETYPE_BUZZARD,
			BASETYPE_RAVEN,
	 
		BASETYPE_STATIC_OBJECT,
			BASETYPE_TREE,
			BASETYPE_STUMP,
			BASETYPE_HUT,
			BASETYPE_BRIDGE,

	// POWERUPS
	BASETYPE_POWERUP,
		BASETYPE_POWERUP_EXPLODINGARROW,
		BASETYPE_POWERUP_FREEZEARROW,
		BASETYPE_POWERUP_HERB,
		BASETYPE_POWERUP_POWERSTATUE,
		BASETYPE_POWERUP_RELIEF,
	

	// WEAPONS
	BASETYPE_ARROW,
	BASETYPE_WEAPON,

	// OTHER OBJECTS
	BASETYPE_CAMERA,
	BASETYPE_WORLD,
	BASETYPE_WORLDSEGMENT,

	BASETYPE_PARTICLE_EMITTER,
		BASETYPE_PARTICLE,				 /* Not really derived from Base! Shhhh... :) */

	BASETYPE_LINEOBJECT,

	BASETYPE_EXPLOSION,
	BASETYPE_EVENT_TRIGGER,

	// COUNT OF POTENTIAL BASE TYPES
	BASETYPE_COUNT,
};


// Basic types, for if you feel like getting anal enough about registering them with the manager
enum BasicType
{
	BASICTYPE_INT = BASETYPE_COUNT,
	BASICTYPE_SHORT,
	BASICTYPE_CHAR,
	BASICTYPE_BYTE,
	BASICTYPE_FLOAT, 
	BASICTYPE_POINTER,
	BASICTYPE_COUNT,
};

// THIS SHOULD BE SET TO THE COUNT OF THE -LAST- ENUM DECLARED IN THIS FILE.
// WITHOUT THIS, THE MEMORY MANAGER WILL CRASH!
#define ENUMERATED_OBJECT_COUNT BASICTYPE_COUNT

#endif
